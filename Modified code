import streamlit as st
import pandas as pd

# Page Config
st.set_page_config(page_title="Dynamic SQL Dashboard", layout="centered")

# Initialize session state
if "connected" not in st.session_state:
    st.session_state.connected = False
    st.session_state.engine = None

# === Logout Function ===
def logout():
    st.session_state.connected = False
    st.session_state.engine = None
    st.experimental_rerun()

# === Connection Page ===
if not st.session_state.connected:
    st.title("üóÑÔ∏è SQL Server Connection")

    with st.form("db_connection_form"):
        host = st.text_input("SQL Server Hostname or IP", value="localhost")
        port = st.text_input("Port", value="1433")
        db_name = st.text_input("Database Name")
        username = st.text_input("Username")
        password = st.text_input("Password", type="password")
        driver = st.selectbox("ODBC Driver", options=[
            "ODBC Driver 18 for SQL Server",
            "ODBC Driver 17 for SQL Server"
        ])
        connect_btn = st.form_submit_button("Connect")

    # === Mock Connection Logic ===
    if connect_btn:
        # Store mock connection state
        st.session_state.connected = True
        st.session_state.engine = "mocked"  # Just a flag
        st.experimental_rerun()  # Rerun to show dashboard immediately

# === Product Report Dashboard ===
if st.session_state.connected:
    # Logout button in top right
    st.markdown(
        "<div style='text-align: right'>"
        "<form action='#' method='post'>"
        "<button style='background-color: #ff4b4b; color: white; border: none; padding: 6px 12px; border-radius: 4px;' "
        "type='submit' name='logout'>üîô Logout</button>"
        "</form></div>",
        unsafe_allow_html=True,
    )

    # Check if user clicked the logout button (simulated via workaround)
    if st.session_state.get('logout_clicked', False):
        logout()

    st.title("üîç Product Report Dashboard")
    st.header("Query Product Data")

    with st.form("query_form"):
        location = st.text_input("Location")
        gf_number = st.text_input("GF Number")
        order_id = st.text_input("Order ID")
        query_submitted = st.form_submit_button("Run Query")

    if query_submitted:
        if not all([location, gf_number, order_id]):
            st.warning("‚ö†Ô∏è All fields are required.")
        else:
            try:
                # === Mock Data for Testing ===
                mock_data = {
                    "location": [location],
                    "gf_number": [gf_number],
                    "order_id": [order_id],
                    "product_name": ["Mock Product"],
                    "quantity": [10],
                    "price": [199.99]
                }
                df = pd.DataFrame(mock_data)

                st.success(f"‚úÖ Found {len(df)} records.")
                st.dataframe(df)

                # CSV Download
                csv = df.to_csv(index=False).encode('utf-8')
                st.download_button("üì• Download CSV", data=csv, file_name="product_report.csv", mime="text/csv")

            except Exception as e:
                st.error(f"‚ùå Error running query: {e}")
